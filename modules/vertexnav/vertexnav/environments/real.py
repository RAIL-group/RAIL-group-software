from vertexnav.world import World
# from vertexnav.environments.simulated import DungeonBuildingUnityBridge
from environments.simulated import WorldBuildingUnityBridge
import math
from shapely import geometry


class SloanBuildingUnityBridge(WorldBuildingUnityBridge):
    """Communication between Unity and DungeonWorld"""
    def make_world(self, world, scale=1.0):
        def dist(p1, p2):
            return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

    def move_object_to_pose(self, object_name, pose):
        self.send_message("{} move {} {} {} {}".format(object_name, pose.y,
                                                       0.33, pose.x, pose.yaw))


def get_world_mit_sloan(inc=['w']):
    """
    Defines the SLOAN environment

    Input: List of vertex types to include in polygon

    Output: World object containing shapely polygons
    """
    obs = []
    inter1 = []
    inter2 = []
    obstacle = []
    enclosure = [
        (-3.14407277107, 0.788364052773, 'w'),
        (6.14413881302, 12.6185903549, 'w'),
        (-12.0155696869, 26.52003479, 'w'),
        (-12.4228839874, 25.9558563232, 'd'),
        (-13.6241636276, 26.8344650269, 'd'),
        (-13.347240448, 27.2506904602, 'w'),
        (-14.1134939194, 27.8486385345, 'w'),
        (-12.3362522125, 30.1839828491, 'w'),
        (-11.0614967346, 31.8463897705, 'w'),
        (-5.2670173645, 27.4334201813, 'w'),
        (-6.63337087631, 25.5421028137, 'w'),
        (2.09723901749, 18.812625885, 'w'),
        (11.7331724167, 31.4063949585, 'w'),
        (13.0758991241, 30.3736534119, 'd'),
        (12.8482961655, 30.0300617218, 'w'),
        (23.4888877869, 21.9004497528, 'w'),
        (23.8377017975, 22.2859344482, 'd'),
        (26.2551231384, 20.3886737823, 'w'),
        (22.5347251892, 15.413731575, 'w'),
        (21.3889122009, 16.2697792053, 'w'),
        (15.6230278015, 8.66678333282, 'w'),
        (20.6673297882, 4.94552898407, 'w'),
        (22.8188037872, 7.56888961792, 'w'),
        (24.8803653717, 6.02704238892, 'w'),
        (21.1974391937, 1.21215391159, 'w'),
        (18.9743843079, 2.91657972336, 'w'),
        (18.5539512634, 2.3295249939, 'd'),
        (18.9713439941, 1.98489522934, 'd'),
        (18.6201305389, 1.5396156311, 'd'),
        (18.1702041626, 1.84140849113, 'd'),
        (13.2366666794, -4.69163894653, 'w'),
        (13.6548461914, -5.03814697266, 'd'),
        (12.7687597275, -6.21916770935, 'w'),
        (13.8509063721, -7.02065372467, 'w'),
        (11.8666172028, -9.66930198669, 'w'),
        (7.02449989319, -5.96890592575, 'd'),
        (7.4119644165, -5.45906877518, 'w'),
        (3.67599725723, -2.68643403053, 'w'),
        (2.8580198288, -3.76152467728, 'w'),
    ]

    interior1 = [
        (1.78792965412, 2.13901901245, 'w'),
        (8.49860858917, 10.8221216202, 'w'),
        (17.8252353668, 3.77096366882, 'w'),
        (11.1824111938, -4.97536230087, 'w'),
        (5.94924497604, -1.02605688572, 'w'),
        (7.122, 0.6171, 'w'),
        (6.87442111969, 0.197876304388, 'i'),
        (6.87442111969, 0.841532409191, 'i'),
        (6.56519842148, 0.473038047552, 'i'),
        (6.83265399933, 0.197876304388, 'i'),
        (6.83265399933, 0.841532409191, 'i'),
        (4.80285215378, 2.38317370415, 'w'),
        (3.57057929039, 0.765040695667, 'w'),
    ]

    interior2 = [
        (3.38511824608, 17.6859512329, 'w'),
        (11.7208995819, 28.6295452118, 'w'),
        (22.4496116638, 20.4469108582, 'w'),
        (14.1521968842, 9.48162269592, 'w'),
    ]

    # for el in enclosure:
    #     if el[2] in inc:
    #         obs.append((el[1], el[0]))
    #
    # world = World(obstacles=[], boundary=geometry.Polygon(obs))
    # return world

    for el in enclosure:
        if el[2] in inc:
            obs.append((el[1], el[0]))

    for el in interior1:
        if el[2] in inc:
            inter1.append((el[1], el[0]))

    for el in interior2:
        if el[2] in inc:
            inter2.append((el[1], el[0]))

    # obstacle += [geometry.Polygon(obs)]
    obstacle += [geometry.Polygon(inter1)]
    obstacle += [geometry.Polygon(inter2)]

    world = World(obstacles=obstacle, boundary=geometry.Polygon(obs))

    return world


def get_world_mit_sloan_small(inc=['w']):
    """
    Defines the SLOAN environment

    Input: List of vertex types to include in polygon

    Output: World object containing shapely polygons
    """
    obs = []
    inter1 = []
    inter2 = []
    obstacle = []
    enclosure = [
        (-3.14407277107, 0.788364052773, 'w'),
        (6.14413881302, 12.6185903549, 'w'),
        (0.66, 16.8, 'w'),
        # (-12.0155696869, 26.52003479, 'w'),
        # (-12.4228839874, 25.9558563232, 'd'),
        # (-13.6241636276, 26.8344650269, 'd'),
        # (-13.347240448, 27.2506904602, 'w'),
        # (-14.1134939194, 27.8486385345, 'w'),
        # (-12.3362522125, 30.1839828491, 'w'),
        # (-11.0614967346, 31.8463897705, 'w'),
        # (-5.2670173645, 27.4334201813, 'w'),
        # (-6.63337087631, 25.5421028137, 'w'),
        # (2.09723901749, 18.812625885, 'w'),
        (11.7331724167, 31.4063949585, 'w'),
        (13.0758991241, 30.3736534119, 'd'),
        (12.8482961655, 30.0300617218, 'w'),
        (23.4888877869, 21.9004497528, 'w'),
        (23.8377017975, 22.2859344482, 'd'),
        (26.2551231384, 20.3886737823, 'w'),
        (22.5347251892, 15.413731575, 'w'),
        (21.3889122009, 16.2697792053, 'w'),
        (15.6230278015, 8.66678333282, 'w'),
        (20.6673297882, 4.94552898407, 'w'),
        # (22.8188037872, 7.56888961792, 'w'),
        # (24.8803653717, 6.02704238892, 'w'),
        # (21.1974391937, 1.21215391159, 'w'),
        (18.9743843079, 2.91657972336, 'w'),
        (18.5539512634, 2.3295249939, 'd'),
        (18.9713439941, 1.98489522934, 'd'),
        (18.6201305389, 1.5396156311, 'd'),
        (18.1702041626, 1.84140849113, 'd'),
        (13.2366666794, -4.69163894653, 'w'),
        (13.6548461914, -5.03814697266, 'd'),
        (12.7687597275, -6.21916770935, 'w'),
        (13.8509063721, -7.02065372467, 'w'),
        (11.8666172028, -9.66930198669, 'w'),
        (7.02449989319, -5.96890592575, 'd'),
        (7.4119644165, -5.45906877518, 'w'),
        (3.67599725723, -2.68643403053, 'w'),
        (2.8580198288, -3.76152467728, 'w'),
    ]

    interior1 = [
        (1.78792965412, 2.13901901245, 'w'),
        (8.49860858917, 10.8221216202, 'w'),
        (17.8252353668, 3.77096366882, 'w'),
        (11.1824111938, -4.97536230087, 'w'),
        (5.94924497604, -1.02605688572, 'w'),
        (7.122, 0.6171, 'w'),
        (6.87442111969, 0.197876304388, 'i'),
        (6.87442111969, 0.841532409191, 'i'),
        (6.56519842148, 0.473038047552, 'i'),
        (6.83265399933, 0.197876304388, 'i'),
        (6.83265399933, 0.841532409191, 'i'),
        (4.80285215378, 2.38317370415, 'w'),
        (3.57057929039, 0.765040695667, 'w'),
    ]

    interior2 = [
        (3.38511824608, 17.6859512329, 'w'),
        (11.7208995819, 28.6295452118, 'w'),
        (22.4496116638, 20.4469108582, 'w'),
        (14.1521968842, 9.48162269592, 'w'),
    ]

    # for el in enclosure:
    #     if el[2] in inc:
    #         obs.append((el[1], el[0]))
    #
    # world = World(obstacles=[], boundary=geometry.Polygon(obs))
    # return world

    for el in enclosure:
        if el[2] in inc:
            obs.append((el[1], el[0]))

    for el in interior1:
        if el[2] in inc:
            inter1.append((el[1], el[0]))

    for el in interior2:
        if el[2] in inc:
            inter2.append((el[1], el[0]))

    # obstacle += [geometry.Polygon(obs)]
    obstacle += [geometry.Polygon(inter1)]
    obstacle += [geometry.Polygon(inter2)]

    world = World(obstacles=obstacle, boundary=geometry.Polygon(obs))

    return world


def get_world_mit_36_2(inc=['w', 'i', 'o']):
    """
    Defines the second floor building 36 environment

    Input: List of vertex types to include in polygon

    Output: World object containing shapely polygons
    """
    inc = ['w', 'i']
    obs = []
    enclosure = [
        (38.7570610046, -3.12935352325, 'w'),
        (38.4254875183, -6.02763223648, 'w'),
        (35.9273605347, -5.732609272, 'w'),
        (36.0338592529, -4.72073936462, 'w'),
        (30.4610881805, -4.02793741226, 'w'),
        (30.3002986908, -5.30161094666, 'w'),
        (28.4203224182, -5.05502796173, 'w'),
        (28.577747345, -3.81505322456, 'w'),
        (24.2908153534, -3.2570939064, 'w'),
        (23.1455860138, -12.6708564758, 'i'),
        (23.5236606598, -12.7585678101, 'o'),
        (23.3259391785, -14.8170433044, 'o'),
        (22.8470745087, -14.7449150085, 'i'),
        (22.7091636658, -15.7196521759, 'w'),
        (21.0488395691, -15.5088796616, 'w'),
        (21.0998191833, -14.5375595093, 'i'),
        (20.5249958038, -14.4318656921, 'o'),
        (20.7750339508, -12.362159729, 'o'),
        (21.2153587341, -12.439291954, 'i'),
        (22.4119281769, -3.02628231049, 'w'),
        (18.1535205841, -2.48051929474, 'w'),
        (17.9231758118, -3.72574901581, 'w'),
        (16.0669116974, -3.49696040154, 'w'),
        (16.2137260437, -2.24265217781, 'w'),
        (11.9817743301, -1.71824479103, 'w'),
        (11.8117218018, -2.97447133064, 'w'),
        (9.92018318176, -2.73534393311, 'w'),
        (10.0608558655, -1.48662948608, 'w'),
        (5.7767457962, -0.944746792316, 'w'),
        (5.62486600876, -2.19767570496, 'w'),
        (3.73253750801, -1.96283602715, 'w'),
        (3.8689892292, -0.713662087917, 'w'),
        (-1.30833816528, -0.0575175732374, 'w'),
        (-0.820710837841, 1.81734800339, 'w'),
        (1.64509093761, 1.49642062187, 'i'),
        (1.62319505215, 1.27957892418, 'o'),
        (2.22265481949, 1.18973243237, 'o'),
        (2.28501915932, 1.43376898766, 'i'),
        (7.84277963638, 0.741574943066, 'i'),
        (7.82410860062, 0.492920964956, 'o'),
        (8.37747764587, 0.415470451117, 'o'),
        (8.44029426575, 0.665226399899, 'i'),
        (14.0294523239, -0.0646714270115, 'i'),
        (14.0272254944, -0.291882008314, 'o'),
        (14.5760030746, -0.328506231308, 'o'),
        (14.6258554459, -0.112949237227, 'i'),
        (20.1594562531, -0.820017635822, 'i'),
        (20.1439762115, -1.0235145092, 'o'),
        (20.7715759277, -1.12369084358, 'o'),
        (20.8246517181, -0.90669375658, 'i'),
        (26.3659000397, -1.60172569752, 'i'),
        (26.3387889862, -1.82181167603, 'o'),
        (26.9604492188, -1.90010118484, 'o'),
        (26.9995651245, -1.66911172867, 'i'),
        (32.5302772522, -2.36135649681, 'i'),
        (32.496219635, -2.64454317093, 'o'),
        (36.2797546387, -3.12007308006, 'o'),
        (36.322265625, -2.83676743507, 'i'),
    ]

    for el in enclosure:
        if el[2] in inc:
            obs.append((el[1], el[0]))

    world = World(obstacles=[], boundary=geometry.Polygon(obs))
    return world


def get_world_mit_36_4(inc=['w', 'i', 'o']):
    """
    Defines the fourth floor building 36 environment

    Input: List of vertex types to include in polygon

    Output: World object containing shapely polygons
    """
    inc = ['w', 'i']
    obs = []
    enclosure = [
        (39.470615387, 2.17658805847, 'w'),
        (39.5517578125, -0.778692960739, 'w'),
        (37.1224822998, -0.792905807495, 'w'),
        (37.1066856384, 0.216090083122, 'w'),
        (31.4875926971, 0.163706541061, 'w'),
        (31.4955043793, -1.09642136097, 'w'),
        (29.6029090881, -1.11483800411, 'w'),
        (29.5899162292, 0.133202314377, 'w'),
        (25.2512607574, 0.0875393152237, 'w'),
        (25.3790092468, -12.3033285141, 'w'),
        (23.530456543, -12.2894716263, 'w'),
        (22.7724628448, -12.3010883331, 'w'),
        (22.7586727142, -10.8385105133, 'w'),
        (23.4751091003, -10.83634758, 'w'),
        (23.4275474548, -7.00789165497, 'w'),
        (22.7338638306, -7.01555681229, 'w'),
        (22.7105083466, -5.01922798157, 'w'),
        (23.4016036987, -5.01984977722, 'w'),
        (23.342918396, 0.0681455731392, 'w'),
        (19.0065593719, -0.00826094299555, 'w'),
        (19.0055923462, -1.26869416237, 'w'),
        (17.1461353302, -1.27939558029, 'w'),
        (17.1066074371, -0.0262905806303, 'w'),
        (12.7384872437, -0.080764144659, 'w'),
        (12.7348575592, -1.3459829092, 'w'),
        (10.8751897812, -1.35382306576, 'w'),
        (10.8389368057, -0.107532173395, 'w'),
        (6.49898195267, -0.168952524662, 'w'),
        (6.51066637039, -1.42084622383, 'w'),
        (4.63645172119, -1.47652590275, 'w'),
        (4.60488986969, -0.196030437946, 'w'),
        (-1.45355057716, -0.261074662209, 'w'),
        (-1.47934246063, 1.63643169403, 'w'),
        (-1.07470369339, 1.62006211281, 'i'),
        (-1.0499471426, 1.42805719376, 'o'),
        (-0.398554444313, 1.40628743172, 'o'),
        (-0.383432030678, 1.66659641266, 'i'),
        (2.06509804726, 1.70228624344, 'i'),
        (2.07631206512, 1.46379709244, 'o'),
        (2.72291278839, 1.46340346336, 'o'),
        (2.73739314079, 1.69070458412, 'i'),
        (8.3018693924, 1.78669095039, 'i'),
        (8.31966781616, 1.56134295464, 'o'),
        (15.2177839279, 1.62270522118, 'o'),
        (15.2278184891, 1.90178537369, 'i'),
        (20.8298988342, 1.98004806042, 'i'),
        (20.8382892609, 1.73651635647, 'o'),
        (24.2886581421, 1.76902282238, 'o'),
        (24.2821846008, 2.00581073761, 'i'),
        (27.0716133118, 2.04999828339, 'i'),
        (27.0848274231, 1.79932630062, 'o'),
        (27.7151622772, 1.80324888229, 'o'),
        (27.7255306244, 2.0597319603, 'i'),
        (33.2807273865, 2.13156175613, 'i'),
        (33.3048973083, 1.80056929588, 'o'),
        (37.0950737, 1.8587243557, 'o'),
        (37.1251792908, 2.14234638214, 'i'),
    ]

    for el in enclosure:
        if el[2] in inc:
            obs.append((el[1], el[0]))

    world = World(obstacles=[], boundary=geometry.Polygon(obs))
    return world


def get_world_mit_rainbow(inc=['w', 'd', 'o']):
    """
    Defines the building 6-c atrium environment

    Input: List of vertex types to include in polygon

    Output: World object containing shapely polygons
    """
    obs = []
    inter = []
    obstacle = []
    enclosure = [
        (-1.74510025978, -0.362198621035, 'w'),
        (-0.175234735012, 3.58867192268, 'w'),
        (2.46903991699, 2.55160903931, 'w'),
        # (2.95548057556, 3.73032903671, 'w'),
        (3.25592064857, 3.61595106125, 'w'),
        (15.1639242172, 33.9498100281, 'w'),
        (20.6315841675, 31.8032855988, 'w'),
        (20.9885425568, 32.6318511963, 'w'),
        (27.0885944366, 30.204252243, 'w'),
        (26.1086349487, 27.5749340057, 'w'),
        (29.0680809021, 26.376367569, 'w'),
        (31.2907600403, 32.3501091003, 'w'),
        (33.3107223511, 31.4998016357, 'w'),
        (31.388130188, 26.7301578522, 'w'),
        (36.0618476868, 24.8097076416, 'w'),
        (36.7049064636, 26.3712940216, 'w'),
        (42.2522735596, 24.2410507202, 'w'),
        (28.0738716125, -11.9708051682, 'w'),
    ]

    interior = [
        (8.61875629425, 1.74197411537, 'w'),
        (19.1257266998, 28.7334136963, 'w'),
        (35.3876571655, 22.2446556091, 'w'),
        (24.7255630493, -4.51794481277, 'w'),
    ]

    # for el in enclosure:
    #     if el[2] in inc:
    #         obs.append((el[1], el[0]))
    #
    # world = World(obstacles=[], boundary=geometry.Polygon(obs))
    # return world

    for el in enclosure:
        if el[2] in inc:
            obs.append((el[1], el[0]))

    for el in interior:
        if el[2] in inc:
            inter.append((el[1], el[0]))

    # obstacle += [geometry.Polygon(obs)]
    obstacle += [geometry.Polygon(inter)]

    world = World(obstacles=obstacle, boundary=geometry.Polygon(obs))

    return world


def get_world_mit_36_3(inc=['w', 'd', 'o']):
    """
    Defines the third floor building 36 environment

    Input: List of vertex types to include in polygon

    Output: World object containing shapely polygons
    """
    obs = []
    enclosure = [
        (-1.28510594368, -0.950448155403, 'w'),
        (-1.26561045647, 1.98215174675, 'w'),
        (0.78294980526, 1.92930912971, 'w'),
        (0.781651258469, 0.918382287025, 'w'),
        (6.40367031097, 0.770433545113, 'w'),
        (6.44467449188, 2.04712867737, 'w'),
        (8.32676696777, 1.98643231392, 'w'),
        (8.29667949677, 0.728792667389, 'w'),
        (12.6598567963, 0.621804118156, 'w'),
        (12.8215961456, 8.2595243454, 'w'),
        (10.7018947601, 8.34455394745, 'w'),
        (10.7585535049, 10.0590114594, 'w'),
        (12.8739976883, 9.9890165329, 'w'),
        (12.9294176102, 11.4235944748, 'w'),
        (14.8173770905, 11.3829231262, 'w'),
        (14.5473890305, 0.558336257935, 'w'),
        (18.8813743591, 0.462022334337, 'w'),
        (18.8974475861, 1.72398304939, 'w'),
        (20.8024616241, 1.66811966896, 'w'),
        (20.7876739502, 0.412778347731, 'w'),
        (25.1160430908, 0.311468243599, 'w'),
        (25.1928119659, 1.58532786369, 'w'),
        (27.0265808105, 1.53227448463, 'w'),
        (27.0221347809, 0.269255757332, 'w'),
        (31.3815422058, 0.159548997879, 'w'),
        (31.3768787384, 1.43545508385, 'w'),
        (33.2887763977, 1.3646812439, 'w'),
        (33.274105072, 0.113353967667, 'w'),
        (38.4715766907, -0.00231754779816, 'w'),
        # (38.4314880371, -1.68135285378, 'w'),
        # (38.2056045532, -1.69291961193, 'w'),
        (38.1883621216, -1.93129241467, 'w'),
        (35.7454452515, -1.86713457108, 'w'),
        # (35.7256622314, -1.63385355473, 'w'),
        # (35.0763053894, -1.60776901245, 'w'),
        (35.0536003113, -1.86640024185, 'w'),
        (29.4700222015, -1.72219216824, 'w'),
        # (29.4591026306, -1.45304965973, 'w'),
        # (28.832321167, -1.45452356339, 'w'),
        (28.8393287659, -1.72187423706, 'w'),
        (23.2270851135, -1.55938816071, 'w'),
        # (23.2298221588, -1.31273126602, 'w'),
        # (22.601568222, -1.30073022842, 'w'),
        (22.5778522491, -1.55320835114, 'w'),
        (16.9946975708, -1.42228245735, 'w'),
        # (16.9974918365, -1.15552663803, 'w'),
        # (16.3734397888, -1.14367723465, 'w'),
        (16.3343772888, -1.40885400772, 'w'),
        (10.7635622025, -1.28230047226, 'w'),
        # (10.7464923859, -1.01644444466, 'w'),
        # (10.1138267517, -1.00723361969, 'w'),
        (10.0916166306, -1.26735246181, 'w'),
        (4.52453184128, -1.13372325897, 'w'),
        # (4.52107810974, -0.809861898422, 'w'),
        # (0.722912549973, -0.722848773003, 'w'),
        (0.701989889145, -1.0292403698, 'w'),
    ]

    for el in enclosure:
        if el[2] in inc:
            obs.append((el[1], el[0]))

    world = World(obstacles=[], boundary=geometry.Polygon(obs))
    return world


def get_world_mit_triangle(inc=['w', 'd', 'o']):
    """
    Defines the building 26 environment

    Input: List of vertex types to include in polygon

    Output: World object containing shapely polygons
    """
    obs = []
    enclosure = [
        (2.87602329254, 1.66094315052, 'w'),
        (3.02457976341, -0.277234375477, 'w'),
        (1.1925547123, -0.48699092865, 'w'),
        (2.6140422821, -1.16811239719, 'w'),
        (2.7875521183, -0.817048668861, 'w'),
        (3.9190826416, -1.30428636074, 'w'),
        (3.74861049652, -1.73623657227, 'w'),
        (4.70419788361, -2.18745160103, 'w'),
        (4.06106233597, -3.63641834259, 'w'),
        (-2.04141759872, -0.763803839684, 'w'),
        (-3.59127926826, -0.889113783836, 'w'),
        (-3.404631853, -1.09580254555, 'w'),
        (-4.07717704773, -2.46486473083, 'w'),
        (-6.80567789078, -1.16066837311, 'w'),
        (-8.34850215912, -1.30688309669, 'w'),
        (-8.14921569824, -1.46727395058, 'w'),
        (-8.80341911316, -2.85632491112, 'w'),
        (-11.5505390167, -1.55757308006, 'w'),
        (-13.1011791229, -1.71716272831, 'w'),
        (-12.890378952, -1.8913090229, 'w'),
        (-13.5456161499, -3.25967502594, 'w'),
        (-16.2983837128, -1.95905804634, 'w'),
        (-17.8527164459, -2.10862636566, 'w'),
        (-17.6496162415, -2.26252698898, 'w'),
        (-18.3006019592, -3.65934681892, 'w'),
        (-21.0536670685, -2.36308908463, 'w'),
        (-22.5990886688, -2.47623682022, 'w'),
        (-22.4007225037, -2.6397562027, 'w'),
        (-23.0495223999, -4.01550722122, 'w'),
        (-25.7878341675, -2.75738215446, 'w'),
        (-27.306596756, -2.88873624802, 'w'),
        (-27.1116600037, -3.06163406372, 'w'),
        (-27.7712249756, -4.44324588776, 'w'),
        (-30.4956283569, -3.15703606606, 'w'),
        (-32.1033821106, -3.2613799572, 'w'),
        (-31.888250351, -3.42187952995, 'w'),
        (-32.5309448242, -4.85204267502, 'w'),
        (-35.3453865051, -3.51110839844, 'w'),
        (-38.3925132751, -3.78853678703, 'w'),
        (-38.2125854492, -3.98152565956, 'w'),
        (-38.8996696472, -5.35960865021, 'w'),
        (-39.1587142944, -5.29189872742, 'w'),
        (-39.3042259216, -5.56304454803, 'w'),
        (-50.2030715942, -0.347498208284, 'w'),
        (-50.201675415, 0.0393722653389, 'w'),
        (-50.8027572632, 0.388799101114, 'w'),
        (-50.345035553, 1.191442132, 'w'),
        (-50.3433685303, 2.37946200371, 'w'),
        (-41.3140182495, -2.06900119781, 'w'),
    ]

    for el in enclosure:
        if el[2] in inc:
            obs.append((el[1], el[0]))

    # obstacle += [geometry.Polygon(obs)]
    # obstacle += [geometry.Polygon(col)]

    world = World(obstacles=[], boundary=geometry.Polygon(obs))

    return world


def get_world_mit_basement_2(inc=['w', 'd', 'o']):
    """
    Defines the basement environment

    Input: List of vertex types to include in polygon

    Output: World object containing shapely polygons
    """
    obs = []
    col = []
    obstacle = []
    column = [
        (3.29, -3.24, 'w'),
        (2.76, -3.30, 'w'),
        (2.66, -2.75, 'w'),
        (3.23, -2.69, 'w'),
    ]
    enclosure = [
        (-4.63, -0.44, 'w'),
        (2.55, 0.82, 'w'),
        (2.16, 2.60, 'w'),
        (2.36, 2.66, 'w'),
        (2.21, 3.23, 'w'),
        (2.06, 3.26, 'w'),
        (1.92, 3.39, 'd'),
        (1.56, 5.10, 'd'),
        (1.12, 7.89, 'w'),
        (1.44, 8.07, 'o'),
        (1.08, 8.13, 'w'),
        (0.61, 10.22, 'd'),
        (0.45, 11.13, 'd'),
        (0.01, 13.68, 'd'),
        (-0.21, 14.54, 'd'),
        (-0.69, 17.30, 'd'),
        (-0.88, 18.18, 'd'),
        (-2.11, 25.15, 'd'),
        (-2.45, 26.95, 'd'),
        (-2.65, 28.53, 'd'),
        (-2.78, 29.45, 'd'),
        (-2.94, 29.64, 'd'),
        (-3.12, 30.73, 'd'),
        (-3.66, 33.78, 'd'),
        (-3.75, 34.50, 'd'),
        (-3.93, 34.93, 'd'),
        (-4.11, 35.78, 'd'),
        (-6.39, 48.18, 'd'),
        (-6.78, 50.00, 'd'),
        (-7.43, 52.13, 'd'),
        (-7.51, 53.87, 'd'),
        (-7.55, 55.15, 'w'),
        (-7.26, 55.34, 'd'),
        (-5.72, 55.60, 'd'),
        (-4.29, 55.70, 'w'),
        (-4.25, 56.07, 'w'),
        (-3.70, 56.23, 'd'),
        (-1.73, 56.57, 'd'),
        (-0.68, 56.75, 'w'),
        (-0.65, 56.40, 'w'),
        (7.87, 57.93, 'w'),
        (7.88, 58.37, 'w'),
        (10.13, 58.82, 'w'),
        (10.27, 58.10, 'w'),
        (12.11, 58.52, 'w'),
        (12.05, 58.72, 'w'),
        (16.02, 59.46, 'w'),
        (16.00, 59.84, 'w'),
        (16.88, 60.01, 'd'),
        (18.87, 60.38, 'd'),
        (19.58, 60.53, 'w'),
        (19.60, 60.11, 'w'),
        (29.62, 62.24, 'd'),
        (31.47, 62.68, 'd'),
        (32.21, 62.69, 'w'),
        (32.21, 62.91, 'w'),
        (34.63, 63.50, 'd'),
        (35.46, 63.65, 'd'),
        (38.37, 64.24, 'd'),
        (39.26, 64.41, 'd'),
        (40.17, 64.50, 'w'),
        (40.53, 62.88, 'd'),
        (40.68, 62.17, 'd'),
        (40.68, 61.97, 'w'),
        (37.88, 61.44, 'w'),
        (37.81, 61.65, 'w'),
        (35.99, 61.28, 'd'),
        (34.47, 61.00, 'd'),
        (33.68, 60.77, 'd'),
        (32.79, 60.59, 'd'),
        (21.63, 58.59, 'd'),
        (20.58, 58.26, 'd'),
        (18.75, 57.83, 'd'),
        (17.69, 57.67, 'd'),
        (17.20, 57.63, 'd'),
        (16.46, 57.56, 'd'),
        (9.30, 56.04, 'd'),
        (8.39, 55.88, 'd'),
        (7.82, 55.81, 'd'),
        (5.85, 55.42, 'd'),
        (4.60, 55.16, 'd'),
        (3.59, 55.02, 'd'),
        (-1.79, 54.02, 'd'),
        (-2.71, 53.88, 'd'),
        (-4.72, 53.56, 'w'),
        (-4.79, 53.32, 'd'),
        (-4.45, 51.79, 'd'),
        (-4.39, 51.57, 'd'),
        (-4.21, 50.42, 'd'),
        (-2.73, 43.05, 'd'),
        (-2.36, 41.20, 'd'),
        (-2.15, 40.15, 'd'),
        (-1.86, 38.33, 'd'),
        (0.21, 27.59, 'd'),
        (0.39, 26.55, 'd'),
        (1.27, 21.71, 'd'),
        (1.45, 20.68, 'd'),
        (2.03, 17.63, 'd'),
        (2.20, 16.76, 'd'),
        (2.55, 14.71, 'd'),
        (2.73, 13.71, 'd'),
        (3.47, 9.77, 'd'),
        (3.65, 8.72, 'd'),
        (3.57, 8.57, 'w'),
        (3.37, 8.47, 'o'),
        (3.55, 8.36, 'w'),
        (3.69, 7.77, 'w'),
        (10.17, 9.07, 'd'),
        (10.84, 9.22, 'd'),
        (11.15, 9.26, 'w'),
        (11.41, 7.69, 'o'),
        (9.84, 7.42, 'o'),
        (9.86, 7.13, 'o'),
        (8.93, 6.92, 'w'),
        (4.24, 6.03, 'w'),
        (4.67, 3.71, 'w'),
        (4.32, 3.67, 'w'),
        (4.39, 3.06, 'w'),
        (4.51, 3.06, 'w'),
        (4.74, 2.60, 'd'),
        (4.92, 1.66, 'd'),
        (5.02, 0.51, 'w'),
        (9.30, 1.29, 'o'),
        (9.72, -0.94, 'o'),
        (9.05, -1.10, 'w'),
        (9.06, -1.45, 'w'),
        (6.17, -2.01, 'w'),
        (6.52, -4.03, 'w'),
        (6.45, -4.05, 'w'),
        (6.50, -4.50, 'w'),
        (9.94, -3.77, 'w'),
        (9.95, -3.89, 'w'),
        (10.83, -3.71, 'd'),
        (11.92, -3.51, 'd'),
        (17.56, -2.29, 'd'),
        (18.44, -2.14, 'd'),
        (19.26, -1.97, 'd'),
        (20.21, -1.78, 'd'),
        (23.86, -1.13, 'd'),
        (25.34, -0.83, 'd'),
        (28.09, -0.28, 'd'),
        (29.82, 0.07, 'd'),
        (40.00, 2.07, 'd'),
        (41.81, 2.44, 'd'),
        (43.03, 2.60, 'w'),
        (43.09, 2.40, 'd'),
        (43.48, 0.52, 'd'),
        (43.46, 0.25, 'w'),
        (41.95, -0.13, 'd'),
        (41, 30, -0.27, 'd'),
        (26.30, -3.27, 'd'),
        (24.50, -3.59, 'd'),
        (18.94, -4.73, 'd'),
        (18.08, -4.88, 'd'),
        (17.58, -4.85, 'd'),
        (16.04, -5.18, 'd'),
        (13.85, -5.57, 'd'),
        (12.02, -5.92, 'd'),
        (11.52, -6.03, 'd'),
        (10.79, -6.16, 'd'),
        (6.10, -7.13, 'o'),
        (6.33, -7.17, 'w'),
        (7.67, -14.21, 'w'),
        (7.38, -14.38, 'o'),
        (7.69, -14.44, 'w'),
        (8.52, -18.04, 'o'),
        (8.71, -18.86, 'o'),
        (9.73, -24.79, 'd'),
        (9.92, -25.76, 'd'),
        (9.93, -26.30, 'd'),
        (10.06, -26.98, 'd'),
        (10.34, -28.52, 'd'),
        (10.71, -30.30, 'd'),
        (11.00, -31.65, 'd'),
        (11.23, -32.71, 'd'),
        (11.32, -33.14, 'd'),
        (11.54, -34.20, 'd'),
        (12.55, -39.46, 'd'),
        (12.70, -40.55, 'd'),
        (12.74, -40.92, 'd'),
        (13.12, -42.85, 'd'),
        (13.79, -45.40, 'd'),
        (14.12, -47.14, 'd'),
        (14.67, -49.95, 'd'),
        (15.81, -56.33, 'w'),
        (15.51, -56.51, 'd'),
        (13.60, -56.78, 'd'),
        (13.43, -56.84, 'w'),
        (13.22, -56.27, 'd'),
        (12.84, -54.38, 'd'),
        (12.35, -51.86, 'd'),
        (12.22, -50.81, 'd'),
        (11.39, -46.87, 'd'),
        (11.25, -45, 97, 'd'),
        (11.16, -45.49, 'd'),
        (11.00, -44.68, 'd'),
        (10.79, -43.64, 'd'),
        (10.43, -41.92, 'd'),
        (8.21, -30.72, 'd'),
        (7.87, -29.00, 'd'),
        (6.16, -19.54, 'd'),
        (5.96, -18.50, 'd'),
        (5.30, -14.92, 'w'),
        (5.40, -14.82, 'o'),
        (5.24, -14.70, 'w'),
        (5.15, -14.35, 'd'),
        (4.95, -13.30, 'd'),
        (4.31, -10.33, 'd'),
        (4.15, -9.33, 'd'),
        (4.12, -8.83, 'd'),
        (3.97, -7.82, 'd'),
        (3.96, -7.57, 'w'),
        (4.25, -7.48, 'o'),
        (4.07, -7.34, 'w'),
        (3.70, -5.18, 'w'),
        (3.32, -5.20, 'd'),
        (2.34, -5.38, 'd'),
        (2.20, -5.38, 'w'),
        (1.58, -2.13, 'w'),
        (1.33, -2.18, 'd'),
        (-2.84, -2.99, 'd'),
        (-3.03, -3.02, 'w'),
        (-2.90, -4.01, 'w'),
        (-3.93, -4.25, 'w'),
        (-4.18, -3.08, 'd'),
        (-4.57, -1.09, 'd'),
    ]

    for el in enclosure:
        if el[2] in inc:
            obs.append((el[1], el[0]))

    for el in column:
        if el[2] in inc:
            col.append((el[1], el[0]))

    # obstacle += [geometry.Polygon(obs)]
    obstacle += [geometry.Polygon(col)]

    world = World(obstacles=obstacle, boundary=geometry.Polygon(obs))

    return world
